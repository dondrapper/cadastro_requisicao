import streamlit as st
import sqlite3
from datetime import datetime, timedelta
import time  # Para o delay de 3 segundos

# Inicializa a sessÃ£o apenas para o cÃ³digo de requisiÃ§Ã£o e controle da tela
if "codigo_requisicao" not in st.session_state:
    st.session_state["codigo_requisicao"] = ""
if "input_key" not in st.session_state:
    st.session_state["input_key"] = 0
if "etapa" not in st.session_state:
    st.session_state["etapa"] = "login"  # ğŸ”¥ Define a tela inicial como "login"

# FunÃ§Ã£o para conectar ao banco
def conectar_banco():
    return sqlite3.connect("sistema.db")

# FunÃ§Ã£o para autenticar o funcionÃ¡rio
def autenticar_funcionario(codigo):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("SELECT nome FROM FUNCIONARIOS WHERE codigo = ?", (codigo,))
    resultado = cursor.fetchone()
    conn.close()
    return resultado[0] if resultado else None

# FunÃ§Ã£o para verificar se a requisiÃ§Ã£o jÃ¡ foi registrada e hÃ¡ quanto tempo
def requisicao_ja_registrada(codigo_funcionario, codigo_requisicao):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT data FROM REQUISICOES 
        WHERE codigo_funcionario = ? AND codigo_requisicao = ?
        ORDER BY data DESC LIMIT 1
    """, (codigo_funcionario, codigo_requisicao))
    resultado = cursor.fetchone()
    conn.close()

    if resultado:
        data_registro = datetime.strptime(resultado[0], "%Y-%m-%d %H:%M:%S")
        tempo_passado = datetime.now() - data_registro
        return True, tempo_passado
    return False, None  # Retorna False se nÃ£o foi registrado ainda

# FunÃ§Ã£o para resetar o campo de entrada sem erro
def resetar_input():
    st.session_state["input_key"] += 1  # ğŸ”¥ Atualiza a key do input para forÃ§ar um novo campo

# FunÃ§Ã£o para salvar a requisiÃ§Ã£o
def salvar_requisicao(codigo_funcionario, codigo_requisicao):
    ja_bipado, tempo_passado = requisicao_ja_registrada(codigo_funcionario, codigo_requisicao)

    if ja_bipado:
        minutos, segundos = divmod(int(tempo_passado.total_seconds()), 60)
        st.error(f"ğŸš« O cÃ³digo **{codigo_requisicao}** jÃ¡ foi bipado hÃ¡ {minutos} min e {segundos} segundos!")

        # Aguarda 3 segundos antes de resetar o input
        time.sleep(3)
        resetar_input()  # ğŸ”¥ ForÃ§a a recriaÃ§Ã£o do input
        st.rerun()
        return False

    # Se nÃ£o foi bipado, salva no banco
    conn = conectar_banco()
    cursor = conn.cursor()
    data_hora_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute("""
        INSERT INTO REQUISICOES (codigo_funcionario, codigo_requisicao, data)
        VALUES (?, ?, ?)
    """, (codigo_funcionario, codigo_requisicao, data_hora_atual))

    conn.commit()
    conn.close()

    st.success(f"âœ… RequisiÃ§Ã£o registrada com sucesso!\nğŸ•’ {data_hora_atual}")

    # Aguarda 3 segundos antes de resetar
    time.sleep(3)
    resetar_input()  # ğŸ”¥ ForÃ§a a recriaÃ§Ã£o do input
    st.session_state["etapa"] = "login"  # ğŸ”¥ Retorna para a tela de login
    st.rerun()
    return True

# ğŸ”¥ **Interface com separaÃ§Ã£o de telas (Login -> RequisiÃ§Ã£o)**
st.set_page_config(page_title="Sistema de Controle", layout="centered")

st.markdown("<h1 style='text-align: center;'>SISTEMA DE CONTROLE DE PRODUÃ‡ÃƒO PRINCIPIUM</h1>", unsafe_allow_html=True)

# ğŸ”µ **Tela de Login (Escanear CrachÃ¡)**
if st.session_state["etapa"] == "login":
    st.markdown("<h3 style='text-align: center;'>Aproxime o crachÃ¡ para identificaÃ§Ã£o</h3>", unsafe_allow_html=True)

    codigo_funcionario = st.text_input("Escaneie seu CrachÃ¡", max_chars=10)

    if codigo_funcionario:
        nome = autenticar_funcionario(codigo_funcionario)
        if nome:
            st.success(f"âœ… Autenticado com sucesso! Bem-vindo, {nome}!")
            st.session_state["usuario"] = nome
            st.session_state["codigo_funcionario"] = codigo_funcionario
            st.session_state["etapa"] = "requisicao"  # ğŸ”¥ AvanÃ§a para a tela de requisiÃ§Ã£o
            st.rerun()
        else:
            st.error("ğŸš« CrachÃ¡ nÃ£o cadastrado!")

# ğŸ”µ **Tela de RequisiÃ§Ã£o (Escanear CÃ³digo de Barras)**
elif st.session_state["etapa"] == "requisicao":
    st.markdown("<h3 style='text-align: center;'>FaÃ§a a leitura do cÃ³digo de barras</h3>", unsafe_allow_html=True)

    st.info(f"ğŸ‘¤ UsuÃ¡rio autenticado: **{st.session_state['usuario']}**")

    # ğŸ”¥ Criando um campo de entrada dinÃ¢mico para evitar erro ao resetar
    codigo_requisicao = st.text_input("Escaneie o cÃ³digo do item (Apenas nÃºmeros, 13 caracteres)", 
                                      max_chars=13, 
                                      key=f"codigo_requisicao_{st.session_state['input_key']}")

    # VerificaÃ§Ã£o do cÃ³digo de barras
    if codigo_requisicao:
        if not codigo_requisicao.isdigit() or len(codigo_requisicao) != 13:
            st.error("âš  O cÃ³digo de barras precisa ter exatamente **13 nÃºmeros**!")

            # Aguarda 3 segundos antes de resetar
            time.sleep(3)
            resetar_input()  # ğŸ”¥ Atualiza a chave do input
            st.rerun()
        else:
            salvar_requisicao(st.session_state["codigo_funcionario"], codigo_requisicao)
