"""
M√≥dulo de relat√≥rio de requisi√ß√µes refatorado.
Permite gerar relat√≥rios filtrados por per√≠odo e setor, nos formatos sint√©tico e anal√≠tico.
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import sqlite3

def conectar_banco():
    """Conecta ao banco de dados SQLite.
    
    Returns:
        sqlite3.Connection: Conex√£o com o banco de dados.
    """
    return sqlite3.connect("sistema.db")

def carregar_requisicoes(data_inicio, data_fim, setor=None, tipo_relatorio="analitico"):
    """Carrega requisi√ß√µes com base nos filtros informados.
    
    Args:
        data_inicio (str): Data inicial no formato YYYY-MM-DD.
        data_fim (str): Data final no formato YYYY-MM-DD.
        setor (str, optional): Setor para filtrar ou None para todos.
        tipo_relatorio (str, optional): "analitico" ou "sintetico".
        
    Returns:
        pandas.DataFrame: DataFrame com as requisi√ß√µes encontradas.
    """
    conn = conectar_banco()
    
    if tipo_relatorio == "analitico":
        # Relat√≥rio anal√≠tico - mostra todas as requisi√ß√µes detalhadas
        if setor:
            query = """
                SELECT f.nome, f.codigo AS codigo_funcionario, f.setor, 
                       r.codigo_requisicao, r.data
                FROM REQUISICOES r
                JOIN FUNCIONARIOS f ON r.codigo_funcionario = f.codigo
                WHERE f.setor = ? AND date(r.data) BETWEEN date(?) AND date(?)
                ORDER BY f.nome, r.data DESC
            """
            df = pd.read_sql(query, conn, params=(setor, data_inicio, data_fim))
        else:
            query = """
                SELECT f.nome, f.codigo AS codigo_funcionario, f.setor, 
                       r.codigo_requisicao, r.data
                FROM REQUISICOES r
                JOIN FUNCIONARIOS f ON r.codigo_funcionario = f.codigo
                WHERE date(r.data) BETWEEN date(?) AND date(?)
                ORDER BY f.nome, r.data DESC
            """
            df = pd.read_sql(query, conn, params=(data_inicio, data_fim))
    else:
        # Relat√≥rio sint√©tico - agrupa por funcion√°rio e conta requisi√ß√µes
        if setor:
            query = """
                SELECT f.nome, f.codigo AS codigo_funcionario, f.setor, 
                       COUNT(r.codigo_requisicao) AS total_requisicoes
                FROM FUNCIONARIOS f
                LEFT JOIN REQUISICOES r ON f.codigo = r.codigo_funcionario
                    AND date(r.data) BETWEEN date(?) AND date(?)
                WHERE f.setor = ?
                GROUP BY f.nome, f.codigo, f.setor
                ORDER BY f.nome
            """
            df = pd.read_sql(query, conn, params=(data_inicio, data_fim, setor))
        else:
            query = """
                SELECT f.nome, f.codigo AS codigo_funcionario, f.setor, 
                       COUNT(r.codigo_requisicao) AS total_requisicoes
                FROM FUNCIONARIOS f
                LEFT JOIN REQUISICOES r ON f.codigo = r.codigo_funcionario
                    AND date(r.data) BETWEEN date(?) AND date(?)
                GROUP BY f.nome, f.codigo, f.setor
                ORDER BY f.nome
            """
            df = pd.read_sql(query, conn, params=(data_inicio, data_fim))
            
    conn.close()
    return df

def obter_setores():
    """Obt√©m a lista de setores dispon√≠veis no sistema.
    
    Returns:
        list: Lista de setores cadastrados.
    """
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT setor FROM FUNCIONARIOS ORDER BY setor")
    setores = [row[0] for row in cursor.fetchall()]
    conn.close()
    return setores

def app():
    """Fun√ß√£o principal do m√≥dulo de relat√≥rios."""
    st.markdown("<h1 style='text-align:center;'>üìë Relat√≥rio de Requisi√ß√µes</h1>", unsafe_allow_html=True)
    
    # Escolha do tipo de relat√≥rio (Sint√©tico ou Anal√≠tico)
    tipo_relatorio = st.radio(
        "Escolha o tipo de relat√≥rio:", 
        ["Relat√≥rio Sint√©tico", "Relat√≥rio Anal√≠tico"],
        help="Sint√©tico: resumo por funcion√°rio. Anal√≠tico: detalhes de cada requisi√ß√£o."
    )
    
    # Sele√ß√£o do setor
    setores = obter_setores()
    opcoes_setor = ["Todos os Setores"] + setores
    setor_selecionado = st.selectbox("Selecione o Setor:", opcoes_setor)
    
    # Configura√ß√£o do per√≠odo (lado a lado)
    st.markdown("### Per√≠odo")
    col1, col2 = st.columns(2)
    with col1:
        data_inicio = st.date_input("üìÖ Data In√≠cio")
    with col2:
        data_fim = st.date_input("üìÖ Data Fim")
    
    # Valida√ß√£o de datas
    if data_inicio > data_fim:
        st.error("‚ö†Ô∏è Data inicial n√£o pode ser posterior √† data final.")
        return
    
    # Preparar par√¢metros para consulta
    tipo_consulta = "sintetico" if tipo_relatorio == "Relat√≥rio Sint√©tico" else "analitico"
    setor_filtro = None if setor_selecionado == "Todos os Setores" else setor_selecionado
    
    # Carregar dados
    df = carregar_requisicoes(data_inicio, data_fim, setor_filtro, tipo_consulta)
    
    # Exibir resultados
    if not df.empty:
        if tipo_consulta == "sintetico":
            # Mostrar totais para relat√≥rio sint√©tico
            total_funcionarios = len(df)
            total_requisicoes = df["total_requisicoes"].sum()
            
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"üìä Total de funcion√°rios: {total_funcionarios}")
            with col2:
                st.success(f"‚úÖ Total de requisi√ß√µes no per√≠odo: {total_requisicoes}")
                
            # Renomear colunas para melhor apresenta√ß√£o
            df_display = df.rename(columns={
                "nome": "Nome",
                "codigo_funcionario": "C√≥digo do Crach√°",
                "setor": "Setor",
                "total_requisicoes": "Total de Requisi√ß√µes"
            })
            
            # Bot√£o para download do relat√≥rio sint√©tico em CSV
            csv = df_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                "üì• Baixar Relat√≥rio (CSV)",
                csv,
                f"relatorio_sintetico_{data_inicio}_a_{data_fim}.csv",
                "text/csv",
                key="download-csv"
            )
            
        else:  # tipo_consulta == "analitico"
            # Mostrar totais para relat√≥rio anal√≠tico
            total_requisicoes = len(df)
            total_funcionarios = df["codigo_funcionario"].nunique()
            
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"üë• Funcion√°rios envolvidos: {total_funcionarios}")
            with col2:
                st.success(f"‚úÖ Total de requisi√ß√µes no per√≠odo: {total_requisicoes}")
                
            # Renomear colunas para melhor apresenta√ß√£o
            df_display = df.rename(columns={
                "nome": "Nome",
                "codigo_funcionario": "C√≥digo do Crach√°",
                "setor": "Setor",
                "codigo_requisicao": "C√≥digo da Requisi√ß√£o",
                "data": "Data e Hora"
            })
        
        # Exibir o dataframe formatado
        st.dataframe(df_display, use_container_width=True)
        
    else:
        setor_msg = f" no setor {setor_selecionado}" if setor_filtro else ""
        st.info(f"üìå Nenhuma requisi√ß√£o encontrada{setor_msg} no per√≠odo selecionado.")

# Garantia que o script seja executado corretamente
if __name__ == "__main__":
    app()